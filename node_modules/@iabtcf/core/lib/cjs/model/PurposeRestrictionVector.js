"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PurposeRestrictionVector=void 0;const PurposeRestriction_js_1=require("./PurposeRestriction.js"),BinarySearchTree_js_1=require("./BinarySearchTree.js"),RestrictionType_js_1=require("./RestrictionType.js"),Cloneable_js_1=require("../Cloneable.js");class PurposeRestrictionVector extends Cloneable_js_1.Cloneable{constructor(){super(...arguments),this.bitLength=0,this.map=new Map}has(e){return this.map.has(e)}isOkToHave(e,s,t){var r;let i=!0;if(null===(r=this.gvl)||void 0===r?void 0:r.vendors){const r=this.gvl.vendors[t];if(r)if(e===RestrictionType_js_1.RestrictionType.NOT_ALLOWED)i=r.legIntPurposes.includes(s)||r.purposes.includes(s);else if(r.flexiblePurposes.length)switch(e){case RestrictionType_js_1.RestrictionType.REQUIRE_CONSENT:i=r.flexiblePurposes.includes(s)&&r.legIntPurposes.includes(s);break;case RestrictionType_js_1.RestrictionType.REQUIRE_LI:i=r.flexiblePurposes.includes(s)&&r.purposes.includes(s)}else i=!1;else i=!1}return i}add(e,s){if(this.isOkToHave(s.restrictionType,s.purposeId,e)){const t=s.hash;this.has(t)||(this.map.set(t,new BinarySearchTree_js_1.BinarySearchTree),this.bitLength=0),this.map.get(t).add(e)}}restrictPurposeToLegalBasis(e){const s=this.gvl.vendorIds,t=e.hash,r=function(){let e;for(e of s);return e}();for(let e=1;e<=r;e++)this.has(t)||(this.map.set(t,new BinarySearchTree_js_1.BinarySearchTree),this.bitLength=0),this.map.get(t).add(e)}getVendors(e){let s=[];if(e){const t=e.hash;this.has(t)&&(s=this.map.get(t).get())}else{const e=new Set;this.map.forEach(s=>{s.get().forEach(s=>{e.add(s)})}),s=Array.from(e)}return s}getRestrictionType(e,s){let t;return this.getRestrictions(e).forEach(e=>{e.purposeId===s&&(void 0===t||t>e.restrictionType)&&(t=e.restrictionType)}),t}vendorHasRestriction(e,s){let t=!1;const r=this.getRestrictions(e);for(let e=0;e<r.length&&!t;e++)t=s.isSameAs(r[e]);return t}getMaxVendorId(){let e=0;return this.map.forEach(s=>{e=Math.max(s.max(),e)}),e}getRestrictions(e){const s=[];return this.map.forEach((t,r)=>{e?t.contains(e)&&s.push(PurposeRestriction_js_1.PurposeRestriction.unHash(r)):s.push(PurposeRestriction_js_1.PurposeRestriction.unHash(r))}),s}getPurposes(){const e=new Set;return this.map.forEach((s,t)=>{e.add(PurposeRestriction_js_1.PurposeRestriction.unHash(t).purposeId)}),Array.from(e)}remove(e,s){const t=s.hash,r=this.map.get(t);r&&(r.remove(e),r.isEmpty()&&(this.map.delete(t),this.bitLength=0))}set gvl(e){this.gvl_||(this.gvl_=e,this.map.forEach((e,s)=>{const t=PurposeRestriction_js_1.PurposeRestriction.unHash(s);e.get().forEach(s=>{this.isOkToHave(t.restrictionType,t.purposeId,s)||e.remove(s)})}))}get gvl(){return this.gvl_}isEmpty(){return 0===this.map.size}get numRestrictions(){return this.map.size}}exports.PurposeRestrictionVector=PurposeRestrictionVector;